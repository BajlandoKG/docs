<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Framework on Vanilla Forums Documentation</title>
    <link>//docs.vanillaforums.com/tags/framework/index.xml</link>
    <description>Recent content in Framework on Vanilla Forums Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <atom:link href="//docs.vanillaforums.com/tags/framework/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Assets</title>
      <link>//docs.vanillaforums.com/developer/framework/assets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//docs.vanillaforums.com/developer/framework/assets/</guid>
      <description>

&lt;h2 id=&#34;assets&#34;&gt;Assets&lt;/h2&gt;

&lt;p&gt;Assets organize content in a document. Assets are called by the main template (e.g. default.master.tpl) which renders the content currently stored in them. Assets are managed with code via plugins or the theme hooks file.&lt;/p&gt;

&lt;h3 id=&#34;default-assets&#34;&gt;Default assets&lt;/h3&gt;

&lt;p&gt;Vanilla uses these assets by default: &lt;code&gt;Head&lt;/code&gt;, &lt;code&gt;Content&lt;/code&gt;, &lt;code&gt;Panel&lt;/code&gt;, and &lt;code&gt;Foot&lt;/code&gt;. You cannot rely on every theme having a &lt;code&gt;Panel&lt;/code&gt;, which is typically used as a sidebar. The &lt;code&gt;Content&lt;/code&gt; asset is required, because it is where the view is rendered. You can, however, assign it additional content.&lt;/p&gt;

&lt;h3 id=&#34;using-assets&#34;&gt;Using assets&lt;/h3&gt;

&lt;p&gt;You can create your own arbitrary assets in your templates and simply add content to them using &lt;code&gt;Gdn::controller()-&amp;gt;addAsset(&#39;AssetName&#39;, $Content, &#39;ContentName&#39;)&lt;/code&gt;. This is a great strategy for creating flexible themes that are easily customized by rearranging assets in the &lt;code&gt;default.master.tpl&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;A common scenario is using &lt;a href=&#34;//docs.vanillaforums.com/developer/framework/modules&#34;&gt;modules&lt;/a&gt; to add content to an asset. (Note: In plugin hooks, you will typically be using &lt;code&gt;$Sender&lt;/code&gt; in place of &lt;code&gt;Gdn::controller()&lt;/code&gt; since the Sender &lt;em&gt;is&lt;/em&gt; the controller).&lt;/p&gt;

&lt;p&gt;You can set the sort order in which content in an asset is displayed via the &lt;a href=&#34;//docs.vanillaforums.com/developer/configuration&#34;&gt;config&lt;/a&gt;. Use a key like &lt;code&gt;Modules.{Application}.{Asset}&lt;/code&gt; (e.g. &lt;code&gt;Modules.Vanilla.Content&lt;/code&gt;) to define an array of &lt;code&gt;ContentName&lt;/code&gt; values that you used when calling &lt;code&gt;addAsset()&lt;/code&gt;. See &lt;code&gt;$ModuleSortContainer&lt;/code&gt; in &lt;code&gt;Gdn_Controller&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Authentication</title>
      <link>//docs.vanillaforums.com/developer/framework/apiv2/authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//docs.vanillaforums.com/developer/framework/apiv2/authentication/</guid>
      <description>

&lt;h2 id=&#34;authenticating-api-calls&#34;&gt;Authenticating API Calls&lt;/h2&gt;

&lt;p&gt;When making calls to the API you&amp;rsquo;ll need to pass an access token in order to authenticate as a user. Vanilla has core support for access tokens, with the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Access tokens can be issued, verified, and revoked with the &lt;strong&gt;AccessTokenModel&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;An access token submitted in the &lt;strong&gt;Authorization&lt;/strong&gt; header will authenticate the appropriate user.&lt;/li&gt;
&lt;li&gt;Expired access tokens are automatically pruned from the access token table, but stick around for a bit to give appropriate expired errors.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;issuing-access-tokens&#34;&gt;Issuing Access Tokens&lt;/h2&gt;

&lt;p&gt;There isn&amp;rsquo;t a built in user interface for issuing access tokens. Right now, addons are expected to issue access tokens as part of their specific single-sign-on mechenism. You can create and issue access tokens with the &lt;strong&gt;AccessTokenModel&lt;/strong&gt;. The &lt;strong&gt;AccessTokenModel&lt;/strong&gt; is a regular model, but you will usually be interacting with it through specific methods.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Issue a token
$model = new AccessTokenModel();
$accessToken = $model-&amp;gt;issue(Gdn::session()-&amp;gt;UserID(), &#39;1 month&#39;, $scope);

// Verify a token.
$tokenRow = $model-&amp;gt;verify($accessToken);

// Revoke a token.
$model-&amp;gt;revoke($accessToken);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When a token is issued it is also signed with its expiry date and a secure hash. These are verified before a token is looked up to help prevent certain brute force attacks. Even if an access token passes its check it must also be verified from the database. In this way access tokens can be revoked before they expire.&lt;/p&gt;

&lt;h3 id=&#34;access-token-scope-wip&#34;&gt;Access Token Scope (WIP)&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;issue()&lt;/strong&gt; method has a scope parameter. This can be left empty or you can specify an array of permission names. If you sepecify a scrope like this then the access token will reduce the permissions of the user for the request to those listed in the scope. In this way access tokens can be issued with less permisions than a user has. It&amp;rsquo;s considered a best practice to use a scope with only the permissions you need.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can never have a scope that gives a user more permissions than they already have. If more permissions are specified then they&amp;rsquo;ll be ignored.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;passing-access-tokens&#34;&gt;Passing Access Tokens&lt;/h2&gt;

&lt;p&gt;Access tokens are past to REST requests in the &lt;strong&gt;Authorization&lt;/strong&gt; header. You pass an access token with the bearer scheme:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Authorization: Bearer &amp;lt;access token&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the access token verifies then the request will be made with the appropriate user. If it doesn&amp;rsquo;t then there will be a 401 error. In this case check the &lt;strong&gt;X-WWW-Authenticate&lt;/strong&gt; header for specific information.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Controllers &amp; URLs</title>
      <link>//docs.vanillaforums.com/developer/framework/controllers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//docs.vanillaforums.com/developer/framework/controllers/</guid>
      <description>

&lt;h2 id=&#34;controllers&#34;&gt;Controllers&lt;/h2&gt;

&lt;p&gt;In our MVC context, controllers are the traffic cops. They receive a parsed request (typically the URL in the address bar), build some data using models, and send it back to the browser in a view.&lt;/p&gt;

&lt;h3 id=&#34;dispatcher&#34;&gt;Dispatcher&lt;/h3&gt;

&lt;p&gt;Vanilla maps URLs to controllers in a fairly direct way. The Dispatcher (&lt;code&gt;Gdn_Dispatcher&lt;/code&gt;) receives incoming &lt;a href=&#34;//docs.vanillaforums.com/developer/framework/requests&#34;&gt;requests&lt;/a&gt; and invokes the appropriate controller(s).&lt;/p&gt;

&lt;h3 id=&#34;mapping-urls&#34;&gt;Mapping URLs&lt;/h3&gt;

&lt;p&gt;First it looks for an application name, then a controller name, then a method name, then any arguments which will be passed in the order given.&lt;/p&gt;

&lt;p&gt;An example that includes all of these is: &lt;code&gt;/dashboard/profile/notifications/1/Lincoln&lt;/code&gt;. This calls the Dashboard&amp;rsquo;s &lt;code&gt;ProfileController&lt;/code&gt; invoking the &lt;code&gt;Notifications&lt;/code&gt; method, which it passes the arguments &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;Lincoln&lt;/code&gt;, in that order. It roughly translates to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ProfileController = new ProfileController();
$ProfileController-&amp;gt;notifications(&#39;1&#39;, &#39;Lincoln&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the application is omitted, it will automatically search enabled applications for a suitably named controller. Therefore, avoid controller name overlap. If the method name is omitted, the &lt;code&gt;Index()&lt;/code&gt; method will be invoked. Therefore, the basic profile URL &lt;code&gt;/profile/1/Lincoln&lt;/code&gt; could be more verbosely written as &lt;code&gt;/dashboard/profile/index/1/Lincoln&lt;/code&gt; to more clearly understand what code it is invoking.&lt;/p&gt;

&lt;h3 id=&#34;pretty-urls&#34;&gt;Pretty URLs&lt;/h3&gt;

&lt;p&gt;All requests are dispatched thru the index.php file. While it&amp;rsquo;s possible to use the framework by passing a &amp;lsquo;p&amp;rsquo; parameter with the rest of the path (e.g. &lt;code&gt;/index.php?p=/profile&lt;/code&gt;), it&amp;rsquo;s best to configure your server to handle &amp;ldquo;pretty&amp;rdquo; URLs.&lt;/p&gt;

&lt;p&gt;On Apache, this is accomplished with the &lt;code&gt;.htaccess&lt;/code&gt; file provided with Vanilla that contains these rewrite rules:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^(.*)$ index.php\?p=$1 [QSA,L]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Consult the &lt;a href=&#34;//docs.vanillaforums.com/developer/community&#34;&gt;community&lt;/a&gt; if you need assistance configuring another server platform such as nginx or IIS.&lt;/p&gt;

&lt;p&gt;Vanilla will attempt to detect whether your system can handle pretty URLs during installation. If it sets it incorrectly, the &lt;a href=&#34;//docs.vanillaforums.com/developer/configuration&#34;&gt;config&lt;/a&gt; setting to enable pretty URLs is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$Configuration[&#39;Garden&#39;][&#39;RewriteUrls&#39;] = TRUE;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The ability to use non-pretty URLs may be deprecated in the future.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Database access</title>
      <link>//docs.vanillaforums.com/developer/framework/database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//docs.vanillaforums.com/developer/framework/database/</guid>
      <description>

&lt;h2 id=&#34;database-layer&#34;&gt;Database layer&lt;/h2&gt;

&lt;p&gt;Vanilla only supports MySQL. It has a generic SQL driver implementation built on top of PDO to potentially allow for other databases (which you can see in &lt;code&gt;/library/databases&lt;/code&gt;). However, at this time, the Vanilla team has no plans to support additional databases.&lt;/p&gt;

&lt;p&gt;The best way to access the database is via existing &lt;a href=&#34;//docs.vanillaforums.com/developer/framework/models&#34;&gt;models&lt;/a&gt;. For instance, to get a list of discussions, use the &lt;code&gt;Get&lt;/code&gt; method in the &lt;code&gt;DiscussionModel&lt;/code&gt;. You can rely on model-based access to already be optimized for performance and utilize caching if it&amp;rsquo;s available.&lt;/p&gt;

&lt;h3 id=&#34;building-queries&#34;&gt;Building queries&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;SQL&lt;/code&gt; object supports chaining. You can call it with &lt;code&gt;Gdn::sql()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a simple example that gets a single discussion by its ID. We write its pieces in the order of a SQL statement, but they can be called in any order up to the &lt;code&gt;get()&lt;/code&gt;. The &lt;code&gt;get()&lt;/code&gt; is the call that fires the built query.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Gdn::sql()-&amp;gt;
   -&amp;gt;select(&#39;*&#39;)
   -&amp;gt;from(&#39;Discussion&#39;)
   -&amp;gt;where(&#39;DiscussionID&#39;, $DiscussionID)
   -&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this is an impractical query to use in your addon, because this functionality already exists in a model:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$DiscussionModel = new DiscussionModel();
$DiscussionModel-&amp;gt;getID($DiscussionID);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Always use pre-existing calls in models when they are available for better performance and forward-compatibility.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example of a complex select that pulls out all the stops:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Gdn::sql()
   -&amp;gt;select(&#39;cm.*&#39;)
   -&amp;gt;select(&#39;iu.Name&#39;, &#39;&#39;, &#39;InsertName&#39;)
   -&amp;gt;from(&#39;ConversationMessage cm&#39;)
   -&amp;gt;join(&#39;Conversation c&#39;, &#39;cm.ConversationID = c.ConversationID&#39;)
   -&amp;gt;join(&#39;UserConversation uc&#39;, &#39;c.ConversationID = uc.ConversationID and uc.UserID = &#39;.$ViewingUserID, &#39;left&#39;)
   -&amp;gt;join(&#39;User iu&#39;, &#39;cm.InsertUserID = iu.UserID&#39;, &#39;left&#39;)
   -&amp;gt;beginWhereGroup()
   -&amp;gt;where(&#39;uc.DateCleared is null&#39;)
   -&amp;gt;orWhere(&#39;uc.DateCleared &amp;lt;&#39;, &#39;cm.DateInserted&#39;, TRUE, FALSE)
   -&amp;gt;endWhereGroup()
   -&amp;gt;where(&#39;cm.ConversationID&#39;, $ConversationID)
   -&amp;gt;orderBy(&#39;cm.DateInserted&#39;, &#39;asc&#39;)
   -&amp;gt;limit($Limit, $Offset)
   -&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the use of limit, offset, where groups, where conditions including less than &amp;amp; null, aliasing, and multiple joins.&lt;/p&gt;

&lt;h3 id=&#34;updates-and-inserts&#34;&gt;Updates and inserts&lt;/h3&gt;

&lt;p&gt;An insert is a single step that takes the table name and an array of values to insert as parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Gdn::sql()-&amp;gt;insert(&#39;UserConversation&#39;, array(
   &#39;ConversationID&#39; =&amp;gt; $ConversationID,
   &#39;UserID&#39; =&amp;gt; $TargetUserID
));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An update requires setting the table in &lt;code&gt;Update&lt;/code&gt;, ends with a &lt;code&gt;Put&lt;/code&gt; (much like the select&amp;rsquo;s ending &lt;code&gt;Get&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Gdn::sql()-&amp;gt;update(&#39;Conversation&#39;)
   -&amp;gt;set(&#39;LastMessageID&#39;, $MessageID)
   -&amp;gt;where(&#39;ConversationID&#39;, $ConversationID)
   -&amp;gt;put();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;direct-queries&#34;&gt;Direct queries&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;query()&lt;/code&gt; method allows for sending unfiltered SQL queries to the database. This is strongly discouraged because it can easily cause security flaws, performance problems, and compatibility problems.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Gdn::sql()-&amp;gt;query(&amp;quot;select * from GDN_Comments&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;structure&#34;&gt;Structure&lt;/h3&gt;

&lt;p&gt;Vanilla allows you to define database structures in code. Use the &lt;code&gt;Gdn::structure()&lt;/code&gt; method to use this object. Here we&amp;rsquo;ll look at part of the definition of the User table as an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Gdn::structure()
   -&amp;gt;primaryKey(&#39;UserID&#39;)
   -&amp;gt;column(&#39;Name&#39;, &#39;varchar(50)&#39;, FALSE, &#39;key&#39;)
   -&amp;gt;column(&#39;Password&#39;, &#39;varbinary(100)&#39;) 
   -&amp;gt;column(&#39;ShowEmail&#39;, &#39;tinyint(1)&#39;, &#39;0&#39;)
   -&amp;gt;column(&#39;Gender&#39;, array(&#39;u&#39;, &#39;m&#39;, &#39;f&#39;), &#39;u&#39;)
   -&amp;gt;column(&#39;Preferences&#39;, &#39;text&#39;, TRUE)
   -&amp;gt;column(&#39;DateOfBirth&#39;, &#39;datetime&#39;, TRUE)
   -&amp;gt;column(&#39;Score&#39;, &#39;float&#39;, NULL)
   -&amp;gt;set();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;column()&lt;/code&gt; takes 4 parameters: name, type, nulldefault (&lt;code&gt;true&lt;/code&gt; to allow nulls, &lt;code&gt;false&lt;/code&gt; to not - any other value becomes the default with disallowed nulls), and keytype (&amp;lsquo;primary&amp;rsquo;, &amp;lsquo;key&amp;rsquo;, &amp;lsquo;index&amp;rsquo;, &amp;lsquo;unique&amp;rsquo;, or &amp;lsquo;fulltext&amp;rsquo; - defaults to false).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;primaryKey()&lt;/code&gt; creates an auto-incrementing column. The Gender column uses an array to create an &lt;code&gt;enum&lt;/code&gt; type; the rest are self-explanatory.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;set()&lt;/code&gt; method takes 2 parameters which should nearly &lt;em&gt;always&lt;/em&gt; be false, which is their default. The first is &lt;code&gt;$Explicit&lt;/code&gt; which is whether to force the structure of the table to match &lt;em&gt;exactly&lt;/em&gt; the definition above. The second is &lt;code&gt;$Drop&lt;/code&gt; which is whether to drop and recreate the table.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Datasets</title>
      <link>//docs.vanillaforums.com/developer/framework/datasets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//docs.vanillaforums.com/developer/framework/datasets/</guid>
      <description>

&lt;h2 id=&#34;datasets&#34;&gt;Datasets&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;Gdn_Dataset&lt;/code&gt; object is a way to store data. Most of the time, this data is the result of a query to the database. When you use our &lt;a href=&#34;//docs.vanillaforums.com/developer/framework/database&#34;&gt;database object&lt;/a&gt; (as you always should) to execute a database select query, it will return a dataset.&lt;/p&gt;

&lt;p&gt;Here are a few commonly used methods you&amp;rsquo;ll want to know about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;count()&lt;/code&gt; returns the number of records in the dataset.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;firstRow()&lt;/code&gt; returns the first record in the dataset.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resultArray()&lt;/code&gt; returns an array of all the data in the dataset (often used directly in a &lt;code&gt;foreach&lt;/code&gt; loop).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just as the database object is chainable, so is the dataset object. The database&amp;rsquo;s &lt;code&gt;get()&lt;/code&gt; method returns the resulting dataset object, so the two chain together seamlessly.&lt;/p&gt;

&lt;p&gt;This example gets the number of records in the database matching a query:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$howMany = Gdn::sql()
    -&amp;gt;select(&#39;*&#39;)
    -&amp;gt;from(&#39;GDN_SomeTable&#39;)
    -&amp;gt;get() // Now it&#39;s a dataset!
    -&amp;gt;count();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example is a common construct for iterating thru records returned from a database:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$users = Gdn::sql()
    -&amp;gt;select(&#39;Name&#39;)
    -&amp;gt;from(&#39;User&#39;)
    -&amp;gt;where(&#39;CountComments&#39;, 1)
    -&amp;gt;get();

foreach ($result-&amp;gt;resultArray() as $user) {
	// Do something to each user with 1 comment.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another use case for datasets is joining datasets together after separate database queries, which can result in better performance. This is simply done by adding data to the array or object dataset manually. See the &lt;code&gt;joinUsers()&lt;/code&gt; method in the &lt;code&gt;UserModel&lt;/code&gt; for one such example.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Email</title>
      <link>//docs.vanillaforums.com/developer/framework/email/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//docs.vanillaforums.com/developer/framework/email/</guid>
      <description>

&lt;h2 id=&#34;sending-emails&#34;&gt;Sending Emails&lt;/h2&gt;

&lt;p&gt;The Garden framework includes an Email object for sending and configuring emails. The formatting of Vanilla Emails is handled by the EmailTemplate property of the Email object.&lt;/p&gt;

&lt;h2 id=&#34;emailtemplate&#34;&gt;EmailTemplate&lt;/h2&gt;

&lt;p&gt;The EmailTemplate object helps to organize the components of an email and prepare them for output.&lt;/p&gt;

&lt;p&gt;These components are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Title&lt;/strong&gt;: A string, placed in a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; block before the rest of the email text in the default email template. Can be HTML-formatted or plaintext.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lead&lt;/strong&gt;: A string, placed just below the title with a font size between the title&amp;rsquo;s and the message&amp;rsquo;s in the default email template. Can be HTML-formatted or plaintext.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Message&lt;/strong&gt;: A string, usually containing the meat of the email. Can be HTML-formatted or plaintext.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Footer&lt;/strong&gt;: A collection of key/values including the footer text, and the background color and text color. Placed after the rest of the email content in the default email template. The text can be HTML-formatted or plaintext.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Button&lt;/strong&gt;: A collection of key/values including the button text, the link url, and the background color and text color. Renders as a button-looking link in the default email template, but could also be formatted to appear as a simple link. Appears after the email message. The text can be HTML-formatted or plaintext.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Image&lt;/strong&gt;: A collection of key/values including the image source url, the link url and alt text. Appears at the top of the email before any other content and has a max-width of 75% of its container in the default email template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An email can contain any or none of the above components.&lt;/p&gt;

&lt;p&gt;These components are properties on the EmailTemplate object and can be set using the corresponding setter method.&lt;/p&gt;

&lt;p&gt;The EmailTemplate object also has a set of colors that can be used in the template view for background colors and text colors.&lt;/p&gt;

&lt;h3 id=&#34;emailtemplate-view&#34;&gt;EmailTemplate View&lt;/h3&gt;

&lt;p&gt;The layout and use of the HTML EmailTemplate components is left up to the view. Vanilla provides a basic Smarty template with inline css styles for rendering. This template lives in dashboard/views/email/email-basic.tpl. This is the default view for all HTML emails in Vanilla.&lt;/p&gt;

&lt;p&gt;A plugin or theme could specify a new php or Smarty template view using the setView() method on the EmailTemplate or by overriding the email-basic.tpl view.&lt;/p&gt;

&lt;p&gt;For more info on overriding view from a plugin or theme, check out our &lt;a href=&#34;//docs.vanillaforums.com/theming/views&#34;&gt;docs on overriding views in a theme&lt;/a&gt;. The same principles found there can be used to override a view in a plugin.&lt;/p&gt;

&lt;h3 id=&#34;default-emailtemplate-values&#34;&gt;Default EmailTemplate Values&lt;/h3&gt;

&lt;p&gt;The default color and image values for your forum&amp;rsquo;s emails can be uploaded and configured from the Email settings page in the dashboard. These values can be overridden by explicitly setting the values in the setButton() or setImage() methods of an individual email&amp;rsquo;s EmailTemplate.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-an-email&#34;&gt;Setting Up an Email&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s an example of setting up a basic email in Vanilla:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Set up the email object
$emailer = new Gdn_Email();
$emailer-&amp;gt;to(&#39;foo@bar.com&#39;);
$emailer-&amp;gt;subject(&#39;Email Subject&#39;);

// Configure the EmailTemplate object
$email = $emailer-&amp;gt;getEmailTemplate();
$email-&amp;gt;setTitle(&#39;Email Title&#39;)
    -&amp;gt;setLead(&#39;Read this exciting email...&#39;)
    -&amp;gt;setMessage(&#39;Email body&#39;)
    // Overrides the default button colors
    -&amp;gt;setButton(externalUrl(&#39;/&#39;), &#39;Check it out&#39;, &#39;#ff0000&#39;, &#39;#ffff00&#39;)
    // Overrides the default image.
    -&amp;gt;setImage(&#39;http://foobar.com/image.png&#39;, externalUrl(&#39;/&#39;), &#39;Image&#39;)
    -&amp;gt;setFooter(&#39;Footer text&#39;);

// Set the configured EmailTemplate
$emailer-&amp;gt;setEmailTemplate($email);

// All set to send!
$emailer-&amp;gt;send();
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Framework</title>
      <link>//docs.vanillaforums.com/developer/framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//docs.vanillaforums.com/developer/framework/</guid>
      <description>

&lt;h2 id=&#34;garden-s-place-in-vanilla&#34;&gt;Garden&amp;rsquo;s place in Vanilla&lt;/h2&gt;

&lt;p&gt;Vanilla is built on an MVC framework named Garden. Its purpose is to provide an extensible, pluggable platform on which to build all the addons that make Vanilla awesome. The design of its database handling was influenced by CodeIgniter, but its plugin architecture is pretty unique.&lt;/p&gt;

&lt;p&gt;Technically, Vanilla is a forum application (addon) built on top of the Garden framework. However, we typically refer to the entire stack as &amp;ldquo;Vanilla&amp;rdquo; for branding consistency and simplicity - including in these docs.&lt;/p&gt;

&lt;p&gt;If we had it all to do over, we would just call the whole thing &amp;ldquo;Vanilla&amp;rdquo; and name the forum application &amp;ldquo;Forum&amp;rdquo;. But now we&amp;rsquo;re stuck with GDN prefixes all over the place; c&amp;rsquo;est la vie.&lt;/p&gt;

&lt;p&gt;The framework is a secondary concern to the forum. In practice, this means if you request an enhancement or find a bug in a framework piece that isn&amp;rsquo;t used anywhere in the forum, we&amp;rsquo;d love a pull request but it&amp;rsquo;s unlikely we&amp;rsquo;ll devote developer time to it. Time is precious, and we&amp;rsquo;re building awesome forums not CodeIgniter 2 (or whatever the hip kids are using these days).&lt;/p&gt;

&lt;h2 id=&#34;addons-are-everything&#34;&gt;Addons are everything&lt;/h2&gt;

&lt;p&gt;Addons are the most important feature of the framework. Our crown jewel, the Vanilla forum itself, is technically an addon. There are many ways for addons to hook into each other, and we&amp;rsquo;re constantly refining their integration.&lt;/p&gt;

&lt;p&gt;There are 4 types of addons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Themes&lt;/li&gt;
&lt;li&gt;Plugins&lt;/li&gt;
&lt;li&gt;Applications&lt;/li&gt;
&lt;li&gt;Locales&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the future, we plan to combine applications and plugins to simplify things. In the meantime, the primary difference between them is that applications can use native controllers more easily, making more complex software a little less messy to navigate. However, as of 2.3, plugins will be able to use native controllers.&lt;/p&gt;

&lt;p&gt;Themes have the full power of plugins via their hooks file, but we suggest only using it for aesthetic changes.&lt;/p&gt;

&lt;h2 id=&#34;file-structure&#34;&gt;File structure&lt;/h2&gt;

&lt;p&gt;The core framework files are located in &lt;code&gt;/library/core&lt;/code&gt;. The database layer is contained in &lt;code&gt;/library/database&lt;/code&gt; and third-party libraries are in &lt;code&gt;/library/vendors&lt;/code&gt;. All our junk is in &lt;code&gt;/trunk&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our framework&amp;rsquo;s frontend is built on Javascript and jQuery. jQuery files and plugins are in &lt;code&gt;/js/library&lt;/code&gt; while files in the root &lt;code&gt;js&lt;/code&gt; folder are custom to our framework.&lt;/p&gt;

&lt;p&gt;Common subfolders in addons will include &lt;code&gt;design&lt;/code&gt; (CSS and images), &lt;code&gt;js&lt;/code&gt;, &lt;code&gt;modules&lt;/code&gt;, &lt;code&gt;views&lt;/code&gt;, and &lt;code&gt;settings&lt;/code&gt; (structure and config).&lt;/p&gt;

&lt;p&gt;Non-view PHP files are named in the format &lt;code&gt;{type}.{name}.php&lt;/code&gt;. &amp;ldquo;Type&amp;rdquo; is one of class, functions, or interface. We do not rename third-party files included in Vanilla. Classes in addons nearly always inherit from one or more framework classes.&lt;/p&gt;

&lt;h2 id=&#34;default-applications&#34;&gt;Default applications&lt;/h2&gt;

&lt;p&gt;Three applications come pre-installed &amp;amp; enabled by default: Dashboard, Vanilla, and Conversations. On a technical level, &amp;lsquo;Vanilla&amp;rsquo; is simply a Garden addon that works in concert with others to create your forum experience. The Vanilla application is only responsible for discussions, comments, and categories.&lt;/p&gt;

&lt;p&gt;The Dashboard application powers your Dashboard UI, users, roles, activity, and much of the core functionality used by a member-driven website. The Conversations application powers private messaging. To disable private messaging, simply disable the Conversations application.&lt;/p&gt;

&lt;p&gt;If you just want to use the Garden framework, you could, theoretically, disable all the core Applications and roll your own from scratch. In reality, we recommend always at least using Dashboard. Even if you&amp;rsquo;re not building a forum with Garden, it&amp;rsquo;s definitely built with a user-centric website in mind.&lt;/p&gt;

&lt;h2 id=&#34;let-the-code-guide-you&#34;&gt;Let the code guide you&lt;/h2&gt;

&lt;p&gt;Because so much is possible with the framework, it can be intimidating to get started. Our best advice is: look at an existing plugin that does something &lt;em&gt;close&lt;/em&gt; to what you&amp;rsquo;re attempting to see how they do it. Code examples can guide you to new solutions you didn&amp;rsquo;t know were possible.&lt;/p&gt;

&lt;p&gt;The Skeleton application in &lt;code&gt;/applications/skeleton&lt;/code&gt; is heavily documented inline to help you get started. Make a copy and get coding, but remember: forgetting to delete the extraneous docs is like leaving the price tag on your clothes. We&amp;rsquo;ll judge you.&lt;/p&gt;

&lt;h2 id=&#34;where-to-start&#34;&gt;Where to start&lt;/h2&gt;

&lt;p&gt;Not sure what doc to read next? We recommend reading the &lt;a href=&#34;//docs.vanillaforums.com/developer/plugins/quickstart&#34;&gt;plugin quickstart&lt;/a&gt;, then try &lt;a href=&#34;//docs.vanillaforums.com/developer/framework/controllers&#34;&gt;Controller&lt;/a&gt; and &lt;a href=&#34;//docs.vanillaforums.com/developer/framework/models&#34;&gt;Models&lt;/a&gt;. It&amp;rsquo;s a self-guided tour from there! Don&amp;rsquo;t forget to stop by the &lt;a href=&#34;https://open.vanillaforums.com&#34;&gt;community forum&lt;/a&gt; for guidance. When in doubt, dance.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Helpers</title>
      <link>//docs.vanillaforums.com/developer/framework/helpers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//docs.vanillaforums.com/developer/framework/helpers/</guid>
      <description>

&lt;h2 id=&#34;helper-functions&#34;&gt;Helper Functions&lt;/h2&gt;

&lt;p&gt;This is a quickstart guide to some of Vanilla&amp;rsquo;s globally available functions and methods. Familiarizing yourself with them will save you time and effort in the long term, and give you clues about how best to use the framework.&lt;/p&gt;

&lt;p&gt;This is by no means an exhaustive list, nor full signature documentation. You&amp;rsquo;ll want to find them in the source code (files at &lt;code&gt;/library/core/functions.*.php&lt;/code&gt;) for more info.&lt;/p&gt;

&lt;h2 id=&#34;getting-setting&#34;&gt;Getting &amp;amp; setting&lt;/h2&gt;

&lt;p&gt;See &lt;code&gt;functions.compatibility.php&lt;/code&gt; for more info.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;val()&lt;/code&gt; allows the retrieval of a named key or property from an array or object, and optionally provide a default if the named item does not exist (default: &lt;code&gt;false&lt;/code&gt;). This is helpful when you&amp;rsquo;re unclear whether a key/property is set, or what data type you have currently. This function was previously named &lt;code&gt;GetValue()&lt;/code&gt;, which is now deprecated.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setValue()&lt;/code&gt; is the opposite of &lt;code&gt;val()&lt;/code&gt; - it sets the named value on the array/object with the specified value.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Gdn::get()&lt;/code&gt; retrieves a key from the &lt;code&gt;GDN_UserMeta&lt;/code&gt; table with a UserID of 0. This is used for generic data storage, especially large, plugin-related settings.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Gdn::set()&lt;/code&gt; places data into the &lt;code&gt;GDN_UserMeta&lt;/code&gt; table with the given key against UserID 0.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;See &lt;code&gt;functions.general.php&lt;/code&gt; for more info.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;c()&lt;/code&gt; grabs a value from the configuration with the option to provide a default (&lt;code&gt;false&lt;/code&gt; if none is provided).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;saveToConfig()&lt;/code&gt; saves a value to the config. Pass &lt;code&gt;false&lt;/code&gt; as the third parameter to only set the config for the current runtime.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;html&#34;&gt;HTML&lt;/h2&gt;

&lt;p&gt;See &lt;code&gt;functions.render.php&lt;/code&gt; for more info.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;url()&lt;/code&gt; generates a valid, full URL for a resource on your site.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;externalUrl()&lt;/code&gt; generates a valid URL to a resource not on your current site.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;anchor()&lt;/code&gt; creates an HTML link.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;img()&lt;/code&gt; creates an &lt;code&gt;img&lt;/code&gt; tag for the provided resource.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wrap()&lt;/code&gt; places HTML tags around content.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;safety-tips&#34;&gt;Safety tips&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use the &lt;code&gt;Form&lt;/code&gt; object to generate HTML forms.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;Format&lt;/code&gt; object to handle outputting user-generated content.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;safeHeader()&lt;/code&gt; to send a header.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;safeRedirect()&lt;/code&gt; to redirect a user.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;checkPermission()&lt;/code&gt; to do just what it says on the tin.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;forum-assets&#34;&gt;Forum assets&lt;/h2&gt;

&lt;p&gt;See &lt;code&gt;functions.render.php&lt;/code&gt; for more info.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;userUrl()&lt;/code&gt; &amp;amp; &lt;code&gt;userAnchor()&lt;/code&gt; take a user and create a URL or full anchor tag around their username.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;userPhoto()&lt;/code&gt; &amp;amp; &lt;code&gt;userPhotoUrl()&lt;/code&gt; create a user&amp;rsquo;s avatar or avatar location, respectively.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;categoryUrl()&lt;/code&gt; generates a category&amp;rsquo;s URL.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;developer-tools&#34;&gt;Developer tools&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;decho()&lt;/code&gt; outputs nicely-formatted debug information nicer than &lt;code&gt;print_r()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deprecated()&lt;/code&gt; indicates information about when a method or function was deprecated.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Inform Messages</title>
      <link>//docs.vanillaforums.com/developer/framework/inform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//docs.vanillaforums.com/developer/framework/inform/</guid>
      <description>

&lt;h2 id=&#34;toaster-notifications&#34;&gt;Toaster Notifications&lt;/h2&gt;

&lt;p&gt;Inform Messages allow you to let users know of some action that your plugin or application has taken. Inform messages allow you to quickly and easily relay information to users, and handle actions based on interaction with those messages. Use them freely to notify users of saved forms, punishments, rewards, etc.&lt;/p&gt;

&lt;p&gt;You can send Inform Messages from within a controller or a plugin, or from a custom javascript function.&lt;/p&gt;

&lt;p&gt;By default, these messages are stackable, dismissable, and autodismissable. They can contain any plain-text string, or any unfiltered custom html string.&lt;/p&gt;

&lt;p&gt;They can be passed with JavaScript callbacks to fire on dismissal so some kind of further action can be taken. There are even CSS definitions that allow you access to over 100 readymade icon sprites you can use to denote meaning in your messaging.&lt;/p&gt;

&lt;h2 id=&#34;using-in-core&#34;&gt;Using in core&lt;/h2&gt;

&lt;p&gt;An example native inform message in Vanilla: saving drafts.&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #333; margin: 20px 0; display: block;&#34; src=&#34;http://farm6.static.flickr.com/5091/5503092803_d4be13195b_o.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When a comment draft is saved, you can see an inform message appear on the bottom-left of the screen. This message shows a close button on the top-right when you hover your mouse overtop, and it automatically disappears after a few seconds. The code used to make this message appear is located on line 448 of /applications/vanilla/class.postcontroller.php:&lt;/p&gt;

&lt;pre lang=&#34;php&#34;&gt;$this-&amp;gt;InformMessage(sprintf(T(&#39;Draft saved at %s&#39;), Gdn_Format::Date()));&lt;/pre&gt;
&lt;p&gt;If we didn&#39;t want to include the time that the draft was saved, we could simplify it further to:&lt;/p&gt;
&lt;pre lang=&#34;php&#34;&gt;$this-&amp;gt;InformMessage(T(&#39;Draft saved successfully&#39;));&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;t()&lt;/code&gt; function is Vanilla&amp;rsquo;s native &amp;ldquo;Translate&amp;rdquo; function so that the string can be converted to other languages.&lt;/p&gt;

&lt;h2 id=&#34;using-in-a-plugin&#34;&gt;Using in a plugin&lt;/h2&gt;

&lt;p&gt;Adding a message to the screen with a plugin.&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #333; margin: 20px 0; display: block;&#34; src=&#34;http://farm6.static.flickr.com/5019/5503917718_4f22ccd6e0_o.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The code to achieve this is pretty easy:&lt;/p&gt;

&lt;pre lang=&#34;php&#34;&gt;public function Base_Render_Before($Sender) {&lt;br /&gt;   $Sender-&amp;gt;InformMessage(&#39;This is a test!&#39;);&lt;br /&gt;}&lt;/pre&gt;
&lt;p&gt;With this code, the message will appear on every page load for every user (signed in or not) and it will disappear after a few moments. Not exactly a useful message, but let&#39;s see what else we can do with it:&lt;/p&gt;
&lt;pre lang=&#34;php&#34;&gt;public function Base_Render_Before($Sender) {&lt;br /&gt;   // Only show the message if the user is signed in&lt;br /&gt;   if (Gdn::Session()-&amp;gt;IsValid())&lt;br /&gt;      $Sender-&amp;gt;InformMessage(&#39;This is a test!&#39;, &#39;Dismissable&#39;);&lt;br /&gt;}&lt;/pre&gt;

&lt;p&gt;Now the message only shows if the user has a valid session, and it doesn&amp;rsquo;t auto-dismiss. The second parameter in the InformMessage method is either a string of CSS classes to be applied to the message container, or an array of options.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t provide the second parameter at all, it defaults to &amp;ldquo;Dismissable AutoDismiss&amp;rdquo;, which obviously makes it so the message automatically disappears after a few moments, or can be immediately dismissed by clicking the &amp;ldquo;close&amp;rdquo; button. If you decide to use the second parameter, here are the options available to you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CssClass:&lt;/strong&gt; An optional set of css classes to pass along to the message&amp;rsquo;s container.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DismissCallback:&lt;/strong&gt; An optional javascript callback that gets called when the &amp;ldquo;close&amp;rdquo; button is clicked on a message.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DismissCallbackUrl:&lt;/strong&gt; An optional javascript callback url that gets requested when the &amp;ldquo;close&amp;rdquo; button is clicked on a message. If a dismissCallback is specified, this option will be ignored.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;static-messages&#34;&gt;Static messages&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s say you want to deliver a message to a particular user, and have that message stay on the screen on every page load until that user dismisses the message. You can achieve it like this:&lt;/p&gt;

&lt;pre lang=&#34;php&#34;&gt;public function Base_Render_Before($Sender) {&lt;br /&gt;   $Session = Gdn::Session();&lt;br /&gt;   if ($Session-&amp;gt;IsValid() &amp;amp;&amp;amp; $Session-&amp;gt;User-&amp;gt;UserID == 1 &amp;amp;&amp;amp; $Session-&amp;gt;GetPreference(&#39;UserDismissedCustomMessage&#39;, false) == false) {&lt;br /&gt;      $Sender-&amp;gt;InformMessage(&lt;br /&gt;         &#39;This message will stay here until you dismiss it!&#39;,&lt;br /&gt;         array(&lt;br /&gt;            &#39;CssClass&#39; =&amp;gt; &#39;Dismissable&#39;,&lt;br /&gt;            &#39;DismissCallbackUrl&#39; =&amp;gt; &#39;/plugin/dismissmessage/&#39;&lt;br /&gt;         )&lt;br /&gt;      );&lt;br /&gt;   }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;// Handle the callback&lt;br /&gt;public function PluginController_DismissMessage_Create($Sender) {&lt;br /&gt;   $Session = Gdn::Session();&lt;br /&gt;   $Session-&amp;gt;SetPreference(&#39;UserDismissedCustomMessage&#39;, TRUE);&lt;br /&gt;}&lt;/pre&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #333; margin: 20px 0; display: block;&#34; src=&#34;http://farm6.static.flickr.com/5254/5503327977_f14304669c_o.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This message appears for me because my UserID is 1, and it keeps showing up on every page until I dismiss it. At that point the callback url is requested via ajax, and the dismissal preference is saved so the message will no longer appear for me.&lt;/p&gt;

&lt;h2 id=&#34;styling-a-message&#34;&gt;Styling a message&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s look at how we can change the appearance of these messages.&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #333; margin: 20px 0; display: block;&#34; src=&#34;http://farm6.static.flickr.com/5014/5503328011_3d92a293b7_o.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There are over 100 icons available for you to use. You can check them out by looking at the icon sprite file located in /applications/dashboard/design/images/inform-sprites.png, and you can see how to reference them by searching for the css definitions in /applications/dashboard/design/style.css (hint: search for &amp;ldquo;span.InformSprite.&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the code to achieve this message:&lt;/p&gt;

&lt;pre lang=&#34;php&#34;&gt;$Sender-&amp;gt;InformMessage(&#39;&amp;lt;span class=&#34;InformSprite Skull&#34;&amp;gt;&amp;lt;/span&amp;gt; This is a test!&#39;, &#39;Dismissable HasSprite&#39;);&lt;/pre&gt;

&lt;p&gt;Note the span at the front of the message. This will contain the &amp;ldquo;Skull&amp;rdquo; image you see above. It&amp;rsquo;s also necessary for the CSS definition in the second argument to contain &amp;ldquo;HasSprite&amp;rdquo; so that the spacing &amp;amp; alignment of the icon all works properly.&lt;/p&gt;

&lt;h2 id=&#34;message-origin&#34;&gt;Message origin&lt;/h2&gt;

&lt;p&gt;You can also style the inform messages to appear &amp;ldquo;From&amp;rdquo; a specific user. &lt;img style=&#34;border: 1px solid #333; margin: 20px 0; display: block;&#34; src=&#34;http://farm6.static.flickr.com/5098/5503917812_cfa84f0c24_o.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll need to load a user record for the icon you wish to display, and then write the message to the screen like this:&lt;/p&gt;

&lt;pre lang=&#34;php&#34;&gt;$User = Gdn::UserModel-&amp;gt;Get(1); // Load the user who&#39;s icon you want to show&lt;br /&gt;$String = UserPhoto($User, &#39;Icon&#39;); // IMPORTANT: Give the icon a css class of &#34;Icon&#34; &lt;br /&gt;$String .= &#39;This is a test!&#39;; // Append some message&lt;br /&gt;$Sender-&amp;gt;InformMessage($String, &#39;Dismissable HasIcon&#39;); // Send to the screen&lt;/pre&gt;

&lt;h2 id=&#34;inform-via-javascript&#34;&gt;Inform via JavaScript&lt;/h2&gt;

&lt;p&gt;At some point you may need to write a message to the screen from JavaScript instead of from the server side. This can be achieved with a similar, JavaScript-based method:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;gdn.informMessage(&amp;lsquo;This is a test!&amp;rsquo;);&lt;/pre&gt;
&lt;p&gt;And all of the same properties exist, so you can be as elaborate as you like:&lt;/p&gt;
&lt;pre lang=&#34;javascript&#34;&gt;gdn.informMessage(&amp;lsquo;This is a test!&amp;rsquo;, {&amp;lsquo;CssClass&amp;rsquo; : &amp;lsquo;Dismissable&amp;rsquo;, &amp;lsquo;DismissCallback&amp;rsquo; : &amp;lsquo;some_function&amp;rsquo;, &amp;lsquo;DismissCallbackUrl&amp;rsquo; : &amp;lsquo;/relative/path/to/callback/url&amp;rsquo;});&lt;/pre&gt;&lt;/p&gt;

&lt;h2 id=&#34;duplication-and-stacking&#34;&gt;Duplication and stacking&lt;/h2&gt;

&lt;p&gt;You can add as many messages to as many pages as you like. If a message is already present on the screen, it will not be added a second time, and new messages will simply stack one-on-top-of-the-next. &lt;img style=&#34;border: 1px solid #333; margin: 20px 0; display: block;&#34; src=&#34;http://farm6.static.flickr.com/5300/5503917872_92042ca343_o.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Internationalization &amp; Localization</title>
      <link>//docs.vanillaforums.com/developer/framework/i18n/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//docs.vanillaforums.com/developer/framework/i18n/</guid>
      <description>

&lt;h2 id=&#34;adding-translatable-phrases-to-vanilla&#34;&gt;Adding translatable phrases to Vanilla&lt;/h2&gt;

&lt;p&gt;Considerations for adding phrases to Vanilla or your addon:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Default to English.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;t()&lt;/code&gt; for all user-viewed text.&lt;/li&gt;
&lt;li&gt;Never use &lt;code&gt;t()&lt;/code&gt; for HTML classes or other frontend code.&lt;/li&gt;
&lt;li&gt;Always use a succinct definition string.&lt;/li&gt;
&lt;li&gt;Avoid jargon or regional dialect.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Models, Forms, &amp; Validation</title>
      <link>//docs.vanillaforums.com/developer/framework/models/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//docs.vanillaforums.com/developer/framework/models/</guid>
      <description>

&lt;h2 id=&#34;models&#34;&gt;Models&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;//docs.vanillaforums.com/framework/datasets&#34;&gt;Datasets&lt;/a&gt;
&lt;a href=&#34;//docs.vanillaforums.com/framework/controllers&#34;&gt;Controllers&lt;/a&gt;
&lt;a href=&#34;//docs.vanillaforums.com/framework/views&#34;&gt;Views&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The theory of a Model in MVC is that it is an object representation of the data being manipulated. In Garden, however, the actual object representation of the data comes from the DataSet class in the form of a php stdClass. So, as you may have guessed already, in Garden the model isn’t a representation of the data. In Garden, a model relates directly to a table, and (with the help of the database object) allows you to retrieve information from the table, enforce the schema of that table on the data being manipulated, and put data into the table. The real power of the Model class in Garden comes from it’s ability to examine the table from which it was created, and understand the data types and requirements for putting data into that table. When combined with Garden’s Validation and Form classes, it allows you to create forms with validation already built in. The Model class itself is quite simple, and can be used on any table in the database. Let’s take a look at a very basic example of how a model could be used to get some data from a database, validate data, and update data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Create a validation object to handle validation issues that the model will encounter:
$Validation = new Gdn_Validation();

// Create a new model based on a table in the database called &amp;quot;Blog&amp;quot;:
$BlogModel = new Gdn_Model(&#39;Blog&#39;, $Validation);

// Retrieve a DataSet from the Blog table:
$BlogData = $BlogModel-&amp;gt;GetWhere(array(&#39;BlogID&#39; =&amp;gt; &#39;12&#39;));

// Grab the first row of the dataset as an associative array:
$Blog = $BlogData-&amp;gt;FirstRow(&#39;&#39;, DATASET_TYPE_ARRAY);

// $Blog now contains every column of the &amp;quot;Blog&amp;quot; table where BlogID == 12. Let&#39;s change something:
$Blog[&#39;Title&#39;] = &#39;Some blog title&#39;;

// And save it:
$BlogModel-&amp;gt;Save($Blog); // Validates

// And let&#39;s try to insert something that we know shouldn&#39;t go into the database:
$Blog[&#39;BlogID&#39;] = &#39;Not an Integer!&#39;;

// And save it:
$BlogModel-&amp;gt;Save($Blog); // Doesn&#39;t validate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the model’s “GetWhere” method is called, it does a very simple &lt;code&gt;select * from Blog where BlogID = 12&lt;/code&gt;query that returns all of the columns from that table into a dataset. At this point, the model still doesn’t know anything about the structure of the table. When the model’s “Save” method is called, the first thing it does is uses the Database object to get information about the table so that it can define the table’s schema. It looks at each column’s data types, isnullable, default values, keys, etc. Then it uses the validation object to build up a set of rules for each column. Finally, it examines the \$Blog that was passed as it’s first argument, matching up associative array keys with column names, and then checks each field against the rules automatically defined for that table. As it encounters problems, it builds up a set of validation results that can then be used however you wish (typically they are consumed by Garden’s form object and displayed on the screen). So, with just a few lines of code, I’ve grabbed data from the database, altered it, and saved it - making sure that no invalid data is inserted into the database, all exceptions are caught, and results can be delivered to the user:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;print_r($BlogModel-&amp;gt;Validation-&amp;gt;Results());
// Prints:
Array (
    [BlogID] =&amp;gt; Array (
            [0] =&amp;gt; ValidateInteger
        )
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means that the &amp;ldquo;BlogID&amp;rdquo; field has encountered a problem when attempting to validate that the BlogID value was an integer. If there had been other errors for that column, they would have also appeared, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;// Empty value is also incorrect
$Blog[&#39;BlogID&#39;] = &#39;&#39;;
$BlogModel-&amp;gt;Save($Blog);
print_r($BlogModel-&amp;gt;Validation-&amp;gt;Results());

// Prints:
Array (
    [BlogID] =&amp;gt; Array (
            [0] =&amp;gt; ValidateRequired,
            [1] =&amp;gt; ValidateInteger
        )
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The validation object will always collect as much information about what is wrong with the data as possible. It is then up to the developer what to do with that information. Luckily, 99% of the time the developer will just let the Form handle the validation results.&lt;/p&gt;

&lt;h2 id=&#34;forms-validation&#34;&gt;Forms &amp;amp; Validation&lt;/h2&gt;

&lt;p&gt;In order for the database, models, validation, &amp;amp; datasets to shine, we need to get the information out and editable by the users. This is where the Form class comes into play. Let’s take a look at an actual example of how the controller, model, validator, and form work together. Let’s say we get the following request: &lt;code&gt;/bloggingtool/post/new&lt;/code&gt; Which is the same as calling the following controller in an imaginary “bloggingtool” application: &lt;code&gt;$Post-&amp;gt;New();&lt;/code&gt;My “New” method on the post controller would contain:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function New() {
   $Validation = new Gdn_Validation();
   $BlogModel = new Gdn_Model(&#39;Blog&#39;, $Validation);

   // Set the BlogModel on the form.
   $this-&amp;gt;Form-&amp;gt;SetModel($BlogModel);

   // If the form has already been posted back...
   if ($this-&amp;gt;Form-&amp;gt;AuthenticatedPostBack()) {
      // Attempt to save the form values
      $BlogID = $this-&amp;gt;Form-&amp;gt;Save();

      // If it saved, redirect to the new entry:
      if ($BlogID !== FALSE)
         Redirect(&#39;/bloggingtool/entries/&#39;.$BlogID);

   }
   // Render the form
   $this-&amp;gt;Render();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The form’s &lt;code&gt;Save()&lt;/code&gt; method calls the model’s &lt;code&gt;Save()&lt;/code&gt; and then takes any validation results that came out of it. If the save was successful, the model would have returned the id of the record inserted (or updated). If not, it could take all of the validation results and write them to the screen for the user to see. That’s really all there is to saving a bunch of data to the database. You might be wondering: &lt;strong&gt;What fields were actually saved?&lt;/strong&gt;That all depends on what you put on the form. The Form class is a “user interface” class, which means that a large number of it’s methods actually return xhtml. The view for my “New” method above would look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;echo $this-&amp;gt;Form-&amp;gt;Open();
echo $this-&amp;gt;Form-&amp;gt;Errors();
echo $this-&amp;gt;Form-&amp;gt;TextInput(&#39;Title&#39;);
echo $this-&amp;gt;Form-&amp;gt;TextBox(&#39;Body&#39;);
echo $this-&amp;gt;Form-&amp;gt;Close(&#39;Save&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, you can see I’ve referenced two fields on the Model that is being manipulated: &lt;em&gt;Title&lt;/em&gt; and &lt;em&gt;Body&lt;/em&gt;. When the form’s “Save” method is called above (and the Model’s “Save” method is called therein), the model validates and attempts to save the data. If one of these two fields were required, it would return a validation result that would then be written to the screen by &lt;code&gt;$this-&amp;gt;Form-&amp;gt;Errors()&lt;/code&gt;. Furthermore, if there were a field on the “Blog” table that were required and not present on this form, it would have a validation result for that as well. What if we were editing a blog post instead of creating a new one?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function Edit($BlogID = &#39;&#39;) {
   $Validation = new Gdn_Validation();
   $BlogModel = new Gdn_Model(&#39;Blog&#39;, $Validation);

   // Load the blog being edited 
   $Blog = $BlogModel -&amp;gt;GetWhere(array(&#39;BlogID&#39; =&amp;gt; $BlogID)) -&amp;gt;FirstRow();

   // Set the BlogModel on the form.
   $this-&amp;gt;Form-&amp;gt;SetModel($BlogModel);

   // Make sure the form knows which item we are editing.
   $this-&amp;gt;Form-&amp;gt;AddHidden(&#39;BlogID&#39;, $BlogID);

   // If the form has NOT been posted back...
   if ($this-&amp;gt;Form-&amp;gt;AuthenticatedPostBack() === FALSE) {
      // Set the blog on the form
      $this-&amp;gt;Form-&amp;gt;SetData($Blog);
   } else {
      // Attempt to save the form values
      $BlogID = $this-&amp;gt;Form-&amp;gt;Save();

      // If it saved, redirect to the new entry:
      if ($BlogID !== FALSE)
         Redirect(&#39;/bloggingtool/entries/&#39;.$BlogID);

   }
   // Render the form
   $this-&amp;gt;Render();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I load the blog and set it’s data onto the form using &lt;code&gt;$this-&amp;gt;Form-&amp;gt;SetData()&lt;/code&gt;. At that point the form takes over and knows to either (a) render the existing data if the form has not been posted back, or (b) render the postback data otherwise. And since I added the BlogID to the form’s hidden field collection, the model will know that it should update a blog row instead of insert a new one.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Modules</title>
      <link>//docs.vanillaforums.com/developer/framework/modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//docs.vanillaforums.com/developer/framework/modules/</guid>
      <description>&lt;p&gt;&lt;p&gt;If controller methods represent the main content/purpose of a page, modules represent secondary information or functions. Modules are small groupings of functionality or information on a page. Some modules that are bundled with Garden include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HeadModule&lt;/strong&gt; - Allows addition of javascript, css &amp;amp; meta information to be rendered in the page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MenuModule&lt;/strong&gt; - Handles management and rendering of items in the main menu.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PagerModule&lt;/strong&gt; - Takes information about a dataset and renders a pagelist.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GuestModule&lt;/strong&gt; - Displays information for unauthenticated users in the sidebar on how to sign in or register.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Modules are application-specific, and are located in the application&amp;rsquo;s &amp;ldquo;modules&amp;rdquo; folder. To see all of the modules packaged with Garden, browse to &lt;code&gt;/applications/garden/modules&lt;/code&gt;. If a module has an associated view, it can be found in the application&amp;rsquo;s views/modules folder with the same name as the module file minus &amp;ldquo;class&amp;rdquo; and &amp;ldquo;module&amp;rdquo;. For example, the view associated with the &lt;code&gt;/applications/garden/modules/class.guestmodule.php&lt;/code&gt; is &lt;code&gt;/applications/garden/views/modules/guest.php&lt;/code&gt;. Modules are extended from the Module class, which is like a very simple version of the controller class. They are typically used to display information in the Panel asset, but they can actually be used anywhere in the page. A module&amp;rsquo;s default asset is defined with the AssetTarget method, which simply returns the name of the asset to add the module to by default.&lt;/p&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;p&gt;The simplest modules will have just two methods: AssetTarget and ToString. Let&amp;rsquo;s make a &amp;ldquo;Hello World&amp;rdquo; module. Create a file called class.helloworldmodule.php and place it in your test application&amp;rsquo;s modules folder (if you don&amp;rsquo;t have a test application, put it in Vanilla&amp;rsquo;s modules folder). Open the file and enter the following:&lt;/p&gt;
&lt;pre lang=&#34;php&#34;&gt;class HelloWorldModule extends Module {&lt;/p&gt;

&lt;p&gt;public function AssetTarget() {
      return &amp;lsquo;Panel&amp;rsquo;;
   }&lt;/p&gt;

&lt;p&gt;public function ToString() {
      return &amp;lsquo;Hello World!&amp;rsquo;;
   }
}&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s go add it to a controller. Open up a controller in your test application and add the following (if you don&amp;rsquo;t have a test application, use vanilla&amp;rsquo;s controllers/discussions.php file and add it to the bottom of the index method) right above the call to $this-&amp;gt;Render():&lt;/p&gt;
&lt;pre lang=&#34;php&#34;&gt;$this-&amp;gt;AddModule(&amp;lsquo;HelloWorldModule&amp;rsquo;);&lt;/pre&gt;
&lt;p&gt;If you browse to this page, the text &amp;ldquo;Hello World!&amp;rdquo; will not appear in the panel. You can change where the &amp;ldquo;Hello World!&amp;rdquo; text appears either by changing the value returned by the AssetTarget method, or on the fly when the module is added by the controller. Let&amp;rsquo;s change the AddModule call to send the module to the Content asset instead of the Panel:&lt;/p&gt;
&lt;pre lang=&#34;php&#34;&gt;$this-&amp;gt;AddModule(&amp;lsquo;HelloWorldModule&amp;rsquo;, &amp;lsquo;Content&amp;rsquo;);&lt;/pre&gt;
&lt;p&gt;Go back and refresh the page to see that the text has moved over to the Content asset. The AddModule method will take a string as the first parameter, or an instantiated module object. So, we could have also added the module in the following manner:&lt;/p&gt;
&lt;pre lang=&#34;php&#34;&gt;$HelloWorldModule = new HelloWorldModule();
$this-&amp;gt;AddModule($HelloWorldModule);&lt;/pre&gt;
&lt;h2&gt;Organizing Module Sort Order&lt;/h2&gt;
&lt;p&gt;You can organize the order that modules appear in assets by manipulating the Modules collection of the Configuration array. Take a look at conf/config-defaults.php to see the default sort order of core-packaged modules:&lt;/p&gt;
&lt;pre lang=&#34;php&#34;&gt;// Modules
$Configuration[&amp;lsquo;Modules&amp;rsquo;][&amp;lsquo;Vanilla&amp;rsquo;][&amp;lsquo;Panel&amp;rsquo;] = array(&amp;lsquo;NewDiscussionModule&amp;rsquo;, &amp;lsquo;GuestModule&amp;rsquo;, &amp;lsquo;Ads&amp;rsquo;);
$Configuration[&amp;lsquo;Modules&amp;rsquo;][&amp;lsquo;Vanilla&amp;rsquo;][&amp;lsquo;Content&amp;rsquo;] = array(&amp;lsquo;Gdn_MessageModule&amp;rsquo;, &amp;lsquo;Notices&amp;rsquo;, &amp;lsquo;Content&amp;rsquo;, &amp;lsquo;Ads&amp;rsquo;);
$Configuration[&amp;lsquo;Modules&amp;rsquo;][&amp;lsquo;Garden&amp;rsquo;][&amp;lsquo;Content&amp;rsquo;] = array(&amp;lsquo;Gdn_MessageModule&amp;rsquo;, &amp;lsquo;Notices&amp;rsquo;, &amp;lsquo;Content&amp;rsquo;, &amp;lsquo;Ads&amp;rsquo;);
$Configuration[&amp;lsquo;Modules&amp;rsquo;][&amp;lsquo;Conversations&amp;rsquo;][&amp;lsquo;Content&amp;rsquo;] = array(&amp;lsquo;Gdn_MessageModule&amp;rsquo;, &amp;lsquo;Notices&amp;rsquo;, &amp;lsquo;Content&amp;rsquo;, &amp;lsquo;Ads&amp;rsquo;);&lt;/pre&gt;
&lt;p&gt;The collection names the application, followed by the asset to organize. The value is an array in order that modules should be organized. If a module is not added, it will simply be ignored. If a module is added that does not appear in the array, it will be added after the defined modules, and in the order that it was added to the code.&lt;/p&gt;
&lt;h2&gt;Doing More&lt;/h2&gt;
&lt;p&gt;While it&amp;rsquo;s nice to be able to add messages to pages, it doesn&amp;rsquo;t illustrate the true power of modules. Modules can be used to retrieve and display data, contain forms for submitting data, and much more. To see all that can be done with modules, take a look at the modules in Garden &amp;amp; Vanilla. Listed below are a couple examples of modules that do more than just spit out text:&lt;/p&gt;
&lt;dl&gt;&lt;dt&gt;/applications/garden/modules/recentactivitymodule.php&lt;/dt&gt;&lt;dd&gt;Grabs recent activities for display in the panel.&lt;/dd&gt;&lt;dt&gt;/applications/conversations/modules/class.addpeoplemodule.php&lt;/dt&gt;&lt;dd&gt;Adds a form to the panel that allows users to add people to a conversation.&lt;/dd&gt;&lt;dt&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OAuth</title>
      <link>//docs.vanillaforums.com/developer/framework/oauth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//docs.vanillaforums.com/developer/framework/oauth/</guid>
      <description>

&lt;h2 id=&#34;sso-with-oauth-overview&#34;&gt;SSO with OAuth: Overview&lt;/h2&gt;

&lt;p&gt;Vanilla currently provides OAuth2 integrations with these third-party services as ready-to-go addons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Facebook&lt;/li&gt;
&lt;li&gt;Twitter&lt;/li&gt;
&lt;li&gt;LinkedIn&lt;/li&gt;
&lt;li&gt;Google+&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because OAuth 2.0 is an SSO &lt;em&gt;framework&lt;/em&gt; and not a narrowly defined protocol (see &lt;a href=&#34;https://tools.ietf.org/html/rfc6749&#34;&gt;OAuth 2.0 Spec&lt;/a&gt;), custom services work is typically required to set up an OAuth solution for your forum. In an attempt to minimize the amount of custom services required to create SSO integrations, Vanilla has created a base class that can easily be extended by custom plugins. This base class might look like many of our plugins (containing event handlers, etc.) it is not intended to be executed directly. To take advantage of this class, either use our &lt;strong&gt;OAuth2 Plugin&lt;/strong&gt; or &lt;strong&gt;Create Your Own OAuth2 Plugin&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;oauth2-plugin&#34;&gt;OAuth2 Plugin&lt;/h2&gt;

&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;

&lt;p&gt;Vanilla has created an OAuth2 plugin that, for most use-cases, can provide a plug-and-play SSO solution.&lt;/p&gt;

&lt;p&gt;OAuth2 accounts are mapped to existing forum accounts by email address, or a new account is created if no match is found.&lt;/p&gt;

&lt;h3 id=&#34;workflow&#34;&gt;Workflow&lt;/h3&gt;

&lt;p&gt;This plugin has a workflow of three distinct steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An &lt;strong&gt;authorization request&lt;/strong&gt; (request for a code)&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;token request&lt;/strong&gt; (the code is exchanged for an authorization token)&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;profile request&lt;/strong&gt; (by passing the authoriztion token)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;assumptions&#34;&gt;Assumptions&lt;/h3&gt;

&lt;p&gt;Besides requiring that you follow the workflow above, this plugin has several assumptions about the setup of the Authorization Server. If your Authorization Server does not meet these assumptions it does not mean that you cannot integrate with a Vanilla forum, it means that you will not be able to use this plugin out of the box and that you will requires some level of customization.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All requests from Vanilla are sent with the header &lt;code&gt;Content-Type: application/x-www-form-urlencoded&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The Authorization Server will expect an authorization request sent by GET with the following parameters:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;response_type&lt;/code&gt; =&amp;gt; &lt;code&gt;code&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;client_id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redirect_uri&lt;/code&gt; =&amp;gt; https://&lt;em&gt;[The url of the forum]&lt;/em&gt;/entry/oauth2&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scope&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;state&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The Authorization Server will respond to a successful log in by sending a &lt;code&gt;code&lt;/code&gt; through GET to the &lt;code&gt;redirect_uri&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The Authorization Server will expect a token request sent by POST with the following parameters:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;code&lt;/code&gt; =&amp;gt; &lt;em&gt;[the code returned from the authorization request]&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;client_id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;client_secret&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redirect_uri&lt;/code&gt; =&amp;gt; https://&lt;em&gt;[The url of the forum]&lt;/em&gt;/entry/oauth2&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grant_type&lt;/code&gt; =&amp;gt; &lt;code&gt;authorization_code&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scope&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The Authorization Server will send a JSON response with the variable &lt;code&gt;access_token&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The Authorization Server will accept a request for the user&amp;rsquo;s profile sent by GET with &lt;code&gt;access_token&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The Authorization Server will send a JSON response with at least the following:

&lt;ul&gt;
&lt;li&gt;A uniqueID for the user&lt;/li&gt;
&lt;li&gt;the user&amp;rsquo;s email&lt;/li&gt;
&lt;li&gt;the user&amp;rsquo;s name (display name, nickname)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Not supported in this work flow are &lt;strong&gt;&amp;ldquo;nonce&amp;rdquo; support&lt;/strong&gt; (a hash sent in the &lt;code&gt;state&lt;/code&gt; and verified to be unchanged) and &lt;strong&gt;refresh tokens&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;features&#34;&gt;Features&lt;/h3&gt;

&lt;p&gt;The OAuth2 Plugin attempts to &amp;ldquo;parameterize&amp;rdquo; as many aspects of the functionality as possible. A settings form in the dashboard allows you to set:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The client id&lt;/li&gt;
&lt;li&gt;The client secret&lt;/li&gt;
&lt;li&gt;The full path to the authorization URI, registration uri, sign out uri, token endpoint and profile endpoint&lt;/li&gt;
&lt;li&gt;The scope&lt;/li&gt;
&lt;li&gt;The exepected keys in the json response in the profile request&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;possible-pitfalls&#34;&gt;Possible Pitfalls&lt;/h3&gt;

&lt;p&gt;A number of things can go wrong when trying to implement SSO with this plugin:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Double check that all the parameters outlined in the Assumptions section above are met&lt;/li&gt;
&lt;li&gt;Your forum must be accessed over &lt;code&gt;https&lt;/code&gt; and must contact your Authorization Server in the same way&lt;/li&gt;
&lt;li&gt;Your Authorization Server will usually need to &amp;ldquo;whitelist&amp;rdquo; the redirect URI (i.e. https://&lt;em&gt;[The url of the forum]&lt;/em&gt;/entry/oauth2)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;create-your-own-oauth2-plugin&#34;&gt;Create Your Own OAuth2 Plugin&lt;/h2&gt;

&lt;p&gt;For more on how to create your own plugin see our docs on &lt;a href=&#34;//docs.vanillaforums.com/developer/plugins/&#34;&gt;Plugins&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Feel free to use the OAuth2 plugin as a template. Make sure your plugin extends Gdn_OAuth2. You may want to change your ProviderKey (the key used to store your configuration data in the db) to something unique:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$this-&amp;gt;setProviderKey(&#39;myOauthConnection&#39;);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This key will appear as part of a URL on the public facing site when users connect so you will want to make it relevant, readable and url safe.&lt;/p&gt;

&lt;p&gt;Now you can override any of the methods or constants in Gdn_OAuth2 or create new hooks for added functionality.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Permissions</title>
      <link>//docs.vanillaforums.com/developer/framework/permissions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//docs.vanillaforums.com/developer/framework/permissions/</guid>
      <description>

&lt;h2 id=&#34;permissions-overview&#34;&gt;Permissions Overview&lt;/h2&gt;

&lt;p&gt;Vanilla uses permissions to restrict access to particular content, options, or workflows. There are a number of functions built into the framework to do this efficiently. We eschew role-detection as a means of access control.&lt;/p&gt;

&lt;p&gt;For example, we would never check to make sure someone was in a role named Moderator before granting access to an option, we would check a permission like &lt;code&gt;Garden.Moderation.Manage&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;naming-permissions&#34;&gt;Naming Permissions&lt;/h3&gt;

&lt;p&gt;We use the same dot notation syntax for permissions as we do for config settings. A typical scheme would be: &lt;code&gt;Namespace.Keyword.Action&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For instance, look at &lt;code&gt;Vanilla.Discussions.Add&lt;/code&gt;. This permissions is registered by the Vanilla application, is related to discussions, and is specifically for adding.&lt;/p&gt;

&lt;p&gt;For the Namespace (first dot tier), use the slug name of your addon. The &lt;code&gt;Plugins&lt;/code&gt; namespace is deprecated.&lt;/p&gt;

&lt;p&gt;The Keyword (second dot tier) should be the most concise description possible of the part of the addon it governs.&lt;/p&gt;

&lt;p&gt;Whenever possible, use one of the following as your Action (third dot tier):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add&lt;/li&gt;
&lt;li&gt;Edit&lt;/li&gt;
&lt;li&gt;View&lt;/li&gt;
&lt;li&gt;Manage&lt;/li&gt;
&lt;li&gt;Delete&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other action names are avoided and may be renamed or refactored out of the framework in the future. However, they are not forbidden and never will be.&lt;/p&gt;

&lt;h3 id=&#34;using-permissions&#34;&gt;Using Permissions&lt;/h3&gt;

&lt;p&gt;There are two basic ways to check a permission. One is to use a true/false conditional, typically to &lt;code&gt;CheckPermission()&lt;/code&gt; in an &lt;code&gt;if&lt;/code&gt; statement:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (CheckPermission(&#39;Permission.Name&#39;)) {
    // Do something special
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The other is to wholesale block execution by a call to &lt;code&gt;Gdn::Session-&amp;gt;Permission()&lt;/code&gt;. This method automatically triggers a permission exception:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function Index() {
    Gdn::Session()-&amp;gt;Permission(&#39;Permission.Name&#39;);
    // Do priviliged things safely now
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Typically we don&amp;rsquo;t use the first convention to trigger a permission exception manually because the second will cover it.&lt;/p&gt;

&lt;h3 id=&#34;multiple-permissions&#34;&gt;Multiple Permissions&lt;/h3&gt;

&lt;p&gt;You can use either method above to check multiple permissions by passing an array of permission names as the first parameter.&lt;/p&gt;

&lt;p&gt;By default, it will require ALL permissions named to pass. If you pass a second parameter of &lt;code&gt;false&lt;/code&gt;, then only ONE of the permissions is needed to pass.&lt;/p&gt;

&lt;p&gt;You may find additional permission checks in Vanilla for permission names that do not appear in the Dashboard using this style: a normal permission name is passed in an array along with an &amp;ldquo;invisible&amp;rdquo; one. This is to allow plugins to define the additional permissions for more granular checks if needed.&lt;/p&gt;

&lt;h3 id=&#34;the-owner-flag&#34;&gt;The Owner Flag&lt;/h3&gt;

&lt;p&gt;The forum owner&amp;rsquo;s account (the one you create when installing Vanilla) gets a special flag set on it. This is accomplished by setting the &lt;code&gt;Admin&lt;/code&gt; column equal to &lt;code&gt;1&lt;/code&gt; in the &lt;code&gt;User&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;Accounts with this flag set bypass all permission checks. &lt;code&gt;CheckPermission&lt;/code&gt; will always return &lt;code&gt;true&lt;/code&gt; and no permission exception will ever be thrown for it. It will do this regardless of any role assignment.&lt;/p&gt;

&lt;p&gt;For this reason, it is extremely important to test your addons with a non-owner account to see your permission checks in action.&lt;/p&gt;

&lt;h3 id=&#34;the-system-flag&#34;&gt;The System Flag&lt;/h3&gt;

&lt;p&gt;The System account is generated for general use by addons and cases where content must be generated by the forum. This account is designated by setting the &lt;code&gt;Admin&lt;/code&gt; column equal to &lt;code&gt;2&lt;/code&gt; in the &lt;code&gt;User&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;This grants the same privileges as the Owner flag, and protects the account from deletion or banning.&lt;/p&gt;

&lt;h3 id=&#34;reversed-permission&#34;&gt;Reversed Permission&lt;/h3&gt;

&lt;p&gt;A special case in the framework is the &lt;code&gt;Vanilla.Approval.Require&lt;/code&gt; permission. It is checked with the &lt;code&gt;CheckRequirement&lt;/code&gt; function. A &lt;code&gt;true&lt;/code&gt; result means their content must go to the Moderation queue for approval. Therefore, a &lt;code&gt;true&lt;/code&gt; result actually grants you &lt;em&gt;less&lt;/em&gt; permission. We don&amp;rsquo;t generally recommend using this construct.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Requests</title>
      <link>//docs.vanillaforums.com/developer/framework/requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//docs.vanillaforums.com/developer/framework/requests/</guid>
      <description>

&lt;h2 id=&#34;requests&#34;&gt;Requests&lt;/h2&gt;

&lt;p&gt;Vanilla&amp;rsquo;s base Controller class (the class from which all &lt;a href=&#34;//docs.vanillaforums.com/developer/framework/controllers&#34;&gt;controllers&lt;/a&gt; are extended) accepts a DeliveryType parameter on every request. Depending on the type of delivery being requested, a controller in Garden will deliver all of a page, part of a page, or part of a page plus extra information as JSON.&lt;/p&gt;

&lt;h3 id=&#34;deliverytype&#34;&gt;DeliveryType&lt;/h3&gt;

&lt;p&gt;There are four delivery types available:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;DELIVERY_TYPE_ALL&lt;/code&gt;: Entire page (default).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELIVERY_TYPE_ASSET&lt;/code&gt;: Content for the requested &lt;a href=&#34;//docs.vanillaforums.com/developer/framework/assets&#34;&gt;asset&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELIVERY_TYPE_VIEW&lt;/code&gt;: Only the requested &lt;a href=&#34;//docs.vanillaforums.com/developer/framework/views&#34;&gt;view&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELIVERY_TYPE_BOOL&lt;/code&gt;: Only report request success (true/false).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If no delivery type is provided in the request, &lt;code&gt;DELIVERY_TYPE_ALL&lt;/code&gt; is assumed.&lt;/p&gt;

&lt;p&gt;In order to made the controller deliver content other than &lt;code&gt;DELIVERY_TYPE_ALL&lt;/code&gt;, you would have to append the request URL (or post data) with the &lt;code&gt;DeliveryType&lt;/code&gt; parameter set to the above value you want.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;DELIVERY_TYPE_VIEW&lt;/code&gt; request can be easily used for progressive data loading. That or a &lt;code&gt;DELIVERY_TYPE_ASSET&lt;/code&gt; request could be used to update part of a page. A &lt;code&gt;DELIVERY_TYPE_BOOL&lt;/code&gt; request is used for actions like closing a discussion.&lt;/p&gt;

&lt;h3 id=&#34;deliverymethod&#34;&gt;DeliveryMethod&lt;/h3&gt;

&lt;p&gt;The DeliveryMethod defines what format you want the response in.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;DELIVERY_METHOD_XHTML&lt;/code&gt;: Delivered as HTML (default).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELIVERY_METHOD_JSON&lt;/code&gt;: As JSON.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELIVERY_METHOD_XML&lt;/code&gt;: As XML.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELIVERY_METHOD_TEXT&lt;/code&gt;: As text/plain (since 2.1).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELIVERY_METHOD_PLAIN&lt;/code&gt;: No Content-Type is set (since 2.1).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELIVERY_METHOD_RSS&lt;/code&gt;: An RSS feed (since 2.1).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Vanilla builds datasets for its pages in generic collections that can be output in any of the above formats, assuming an appropriate view is available.&lt;/p&gt;

&lt;p&gt;You can define a &lt;code&gt;DeliveryMethod&lt;/code&gt; by appending it to your request like &lt;code&gt;DeliveryType&lt;/code&gt;, or by appending an extension to your request after the method. For example, try viewing &lt;code&gt;/profile&lt;/code&gt; on your forum vs. &lt;code&gt;/profile.json&lt;/code&gt;. Note that arguments are added normally after another slash. Supposing you wanted to view userid 2&amp;rsquo;s profile with the name Lincoln, you would use &lt;code&gt;/profile.json/2/Lincoln&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;parsing-requests&#34;&gt;Parsing Requests&lt;/h3&gt;

&lt;p&gt;Vanilla parses incoming URLs and parameters for you. There is rarely any reason to directly access PHP globals like &lt;code&gt;$_GET&lt;/code&gt;. The &lt;code&gt;Gdn_Request&lt;/code&gt; class (in &lt;code&gt;/library/core/class.request.php&lt;/code&gt;) handles this for you.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Gdn::request()-&amp;gt;domain()&lt;/code&gt; will return the current domain. These methods also work as you&amp;rsquo;d expect: &lt;code&gt;Host&lt;/code&gt;, &lt;code&gt;IpAddress&lt;/code&gt;, &lt;code&gt;Path&lt;/code&gt;, and &lt;code&gt;Port&lt;/code&gt;. You can also call &lt;code&gt;Get&lt;/code&gt; and &lt;code&gt;Post&lt;/code&gt; with a parameter name to see its current value. See &lt;code&gt;Gdn_Request&lt;/code&gt; for more request data.&lt;/p&gt;

&lt;p&gt;A few more useful methods:&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;Gdn::request()-&amp;gt;isAuthenticatedPostback()&lt;/code&gt; to check that the current user sent a &lt;code&gt;POST&lt;/code&gt; request along with their TransientKey to protect against CSRF attacks. All forms built with Vanilla include a TransientKey.&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;Gdn::request()-&amp;gt;url()&lt;/code&gt; to build safe URLs to other parts of Vanilla. The  &lt;code&gt;url()&lt;/code&gt; function is a shortcut to this method.&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;Gdn::request()-&amp;gt;requestMethod()&lt;/code&gt; to find out which Vanilla method was called by the current request.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>