<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Framework on Vanilla Forums Documentation</title>
    <link>http://127.0.0.1:8081/tags/framework/</link>
    <description>Recent content in Framework on Vanilla Forums Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="http://127.0.0.1:8081/tags/framework/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Assets</title>
      <link>http://127.0.0.1:8081/developer/framework/assets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://127.0.0.1:8081/developer/framework/assets/</guid>
      <description>Assets Assets organize content in a document. Assets are called by the main template (e.g. default.master.tpl) which renders the content currently stored in them. Assets are managed with code via plugins or the theme hooks file.
Default assets Vanilla uses these assets by default: Head, Content, Panel, and Foot. You cannot rely on every theme having a Panel, which is typically used as a sidebar. The Content asset is required, because it is where the view is rendered.</description>
    </item>
    
    <item>
      <title>Authentication</title>
      <link>http://127.0.0.1:8081/developer/framework/apiv2/authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://127.0.0.1:8081/developer/framework/apiv2/authentication/</guid>
      <description>Authenticating API Calls When making calls to the API you&amp;rsquo;ll need to pass an access token in order to authenticate as a user. Vanilla has core support for access tokens, with the following features:
 Access tokens can be issued, verified, and revoked with the AccessTokenModel An access token submitted in the Authorization header will authenticate the appropriate user. Expired access tokens are automatically pruned from the access token table, but stick around for a bit to give appropriate expired errors.</description>
    </item>
    
    <item>
      <title>Controllers &amp; URLs</title>
      <link>http://127.0.0.1:8081/developer/framework/controllers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://127.0.0.1:8081/developer/framework/controllers/</guid>
      <description>Controllers In our MVC context, controllers are the traffic cops. They receive a parsed request (typically the URL in the address bar), build some data using models, and send it back to the browser in a view.
Dispatcher Vanilla maps URLs to controllers in a fairly direct way. The Dispatcher (Gdn_Dispatcher) receives incoming requests and invokes the appropriate controller(s).
Mapping URLs First it looks for an application name, then a controller name, then a method name, then any arguments which will be passed in the order given.</description>
    </item>
    
    <item>
      <title>Database access</title>
      <link>http://127.0.0.1:8081/developer/framework/database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://127.0.0.1:8081/developer/framework/database/</guid>
      <description>Database layer Vanilla only supports MySQL. It has a generic SQL driver implementation built on top of PDO to potentially allow for other databases (which you can see in /library/databases). However, at this time, the Vanilla team has no plans to support additional databases.
The best way to access the database is via existing models. For instance, to get a list of discussions, use the Get method in the DiscussionModel.</description>
    </item>
    
    <item>
      <title>Datasets</title>
      <link>http://127.0.0.1:8081/developer/framework/datasets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://127.0.0.1:8081/developer/framework/datasets/</guid>
      <description>Datasets The Gdn_Dataset object is a way to store data. Most of the time, this data is the result of a query to the database. When you use our database object (as you always should) to execute a database select query, it will return a dataset.
Here are a few commonly used methods you&amp;rsquo;ll want to know about:
 count() returns the number of records in the dataset. firstRow() returns the first record in the dataset.</description>
    </item>
    
    <item>
      <title>Email</title>
      <link>http://127.0.0.1:8081/developer/framework/email/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://127.0.0.1:8081/developer/framework/email/</guid>
      <description>Sending Emails The Garden framework includes an Email object for sending and configuring emails. The formatting of Vanilla Emails is handled by the EmailTemplate property of the Email object.
EmailTemplate The EmailTemplate object helps to organize the components of an email and prepare them for output.
These components are:
 Title: A string, placed in a &amp;lt;h1&amp;gt; block before the rest of the email text in the default email template.</description>
    </item>
    
    <item>
      <title>Framework</title>
      <link>http://127.0.0.1:8081/developer/framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://127.0.0.1:8081/developer/framework/</guid>
      <description>Garden&amp;rsquo;s place in Vanilla Vanilla is built on an MVC framework named Garden. Its purpose is to provide an extensible, pluggable platform on which to build all the addons that make Vanilla awesome. The design of its database handling was influenced by CodeIgniter, but its plugin architecture is pretty unique.
Technically, Vanilla is a forum application (addon) built on top of the Garden framework. However, we typically refer to the entire stack as &amp;ldquo;Vanilla&amp;rdquo; for branding consistency and simplicity - including in these docs.</description>
    </item>
    
    <item>
      <title>Helpers</title>
      <link>http://127.0.0.1:8081/developer/framework/helpers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://127.0.0.1:8081/developer/framework/helpers/</guid>
      <description>Helper Functions This is a quickstart guide to some of Vanilla&amp;rsquo;s globally available functions and methods. Familiarizing yourself with them will save you time and effort in the long term, and give you clues about how best to use the framework.
This is by no means an exhaustive list, nor full signature documentation. You&amp;rsquo;ll want to find them in the source code (files at /library/core/functions.*.php) for more info.
Getting &amp;amp; setting See functions.</description>
    </item>
    
    <item>
      <title>Inform Messages</title>
      <link>http://127.0.0.1:8081/developer/framework/inform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://127.0.0.1:8081/developer/framework/inform/</guid>
      <description>Toaster Notifications Inform Messages allow you to let users know of some action that your plugin or application has taken. Inform messages allow you to quickly and easily relay information to users, and handle actions based on interaction with those messages. Use them freely to notify users of saved forms, punishments, rewards, etc.
You can send Inform Messages from within a controller or a plugin, or from a custom javascript function.</description>
    </item>
    
    <item>
      <title>Internationalization &amp; Localization</title>
      <link>http://127.0.0.1:8081/developer/framework/i18n/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://127.0.0.1:8081/developer/framework/i18n/</guid>
      <description> Adding translatable phrases to Vanilla Considerations for adding phrases to Vanilla or your addon:
 Default to English. Use the t() for all user-viewed text. Never use t() for HTML classes or other frontend code. Always use a succinct definition string. Avoid jargon or regional dialect.  </description>
    </item>
    
    <item>
      <title>Models, Forms, &amp; Validation</title>
      <link>http://127.0.0.1:8081/developer/framework/models/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://127.0.0.1:8081/developer/framework/models/</guid>
      <description>Models Datasets Controllers Views
The theory of a Model in MVC is that it is an object representation of the data being manipulated. In Garden, however, the actual object representation of the data comes from the DataSet class in the form of a php stdClass. So, as you may have guessed already, in Garden the model isnâ€™t a representation of the data. In Garden, a model relates directly to a table, and (with the help of the database object) allows you to retrieve information from the table, enforce the schema of that table on the data being manipulated, and put data into the table.</description>
    </item>
    
    <item>
      <title>Modules</title>
      <link>http://127.0.0.1:8081/developer/framework/modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://127.0.0.1:8081/developer/framework/modules/</guid>
      <description>If controller methods represent the main content/purpose of a page, modules represent secondary information or functions. Modules are small groupings of functionality or information on a page. Some modules that are bundled with Garden include:
 HeadModule - Allows addition of javascript, css &amp;amp; meta information to be rendered in the page. MenuModule - Handles management and rendering of items in the main menu. PagerModule - Takes information about a dataset and renders a pagelist.</description>
    </item>
    
    <item>
      <title>OAuth</title>
      <link>http://127.0.0.1:8081/developer/framework/oauth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://127.0.0.1:8081/developer/framework/oauth/</guid>
      <description>SSO with OAuth: Overview Vanilla currently provides OAuth2 integrations with these third-party services as ready-to-go addons:
 Facebook Twitter LinkedIn Google+  Because OAuth 2.0 is an SSO framework and not a narrowly defined protocol (see OAuth 2.0 Spec), custom services work is typically required to set up an OAuth solution for your forum. In an attempt to minimize the amount of custom services required to create SSO integrations, Vanilla has created a base class that can easily be extended by custom plugins.</description>
    </item>
    
    <item>
      <title>Permissions</title>
      <link>http://127.0.0.1:8081/developer/framework/permissions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://127.0.0.1:8081/developer/framework/permissions/</guid>
      <description>Permissions Overview Vanilla uses permissions to restrict access to particular content, options, or workflows. There are a number of functions built into the framework to do this efficiently. We eschew role-detection as a means of access control.
For example, we would never check to make sure someone was in a role named Moderator before granting access to an option, we would check a permission like Garden.Moderation.Manage.
Naming Permissions We use the same dot notation syntax for permissions as we do for config settings.</description>
    </item>
    
    <item>
      <title>Requests</title>
      <link>http://127.0.0.1:8081/developer/framework/requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://127.0.0.1:8081/developer/framework/requests/</guid>
      <description>Requests Vanilla&amp;rsquo;s base Controller class (the class from which all controllers are extended) accepts a DeliveryType parameter on every request. Depending on the type of delivery being requested, a controller in Garden will deliver all of a page, part of a page, or part of a page plus extra information as JSON.
DeliveryType There are four delivery types available:
 DELIVERY_TYPE_ALL: Entire page (default). DELIVERY_TYPE_ASSET: Content for the requested asset.</description>
    </item>
    
    <item>
      <title>Resource Routing</title>
      <link>http://127.0.0.1:8081/developer/framework/apiv2/resource-routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://127.0.0.1:8081/developer/framework/apiv2/resource-routing/</guid>
      <description>RESTful Resource Routing to Controller Methods This section tells you how to name your controller objects and methods so that they can be accessed by API requests. By default, all of your controllers are accessed from the /api/v2/ base path. After that, the rest of the path and the HTTP method determines what method gets called within your app.
Controller Names In order for a controller to be accessible from the API its name must end in &amp;ldquo;ApiController&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Views</title>
      <link>http://127.0.0.1:8081/developer/framework/views/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://127.0.0.1:8081/developer/framework/views/</guid>
      <description>Views Once a controller method is called to handle the request, how is the xhtml of the page put together? Views. There are two types of views in Garden: &amp;ldquo;Views&amp;rdquo; and &amp;ldquo;Master Views&amp;rdquo;. A view relates directly to the controller method that called it and handles rendering content related to that request. You can typically think of a view as the content for that page. For example, if a Vanilla-&amp;gt;Discussion-&amp;gt;All() method is called, the view for that method would handle rendering all of the discussions.</description>
    </item>
    
    <item>
      <title>Writing API Endpoints</title>
      <link>http://127.0.0.1:8081/developer/framework/apiv2/api-endpoints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://127.0.0.1:8081/developer/framework/apiv2/api-endpoints/</guid>
      <description>Controller Endpoints When writing an API controller class, each method represents an endpoint. How to define those endpoint names and parameters is covered in the resource routing guide. This guide concerns writing the contents of a method.
The Controller Base Class Although controllers don&amp;rsquo;t need to inherit from any class, the Vanilla\Web\Controller class offers useful functionality and is going to be the class you inherit from almost 100% of the time.</description>
    </item>
    
    <item>
      <title>Writing APIs</title>
      <link>http://127.0.0.1:8081/developer/framework/apiv2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://127.0.0.1:8081/developer/framework/apiv2/</guid>
      <description>The Vanilla APIv2 Vanilla&amp;rsquo;s APIv2 offers a powerful, yet simple way of creating RESTful API endpoints in your application. With version 2 of the API we consider Vanilla to be an &amp;ldquo;API first&amp;rdquo; framework where you write your API first and then think about the resulting HTML. This offers several benefits:
 An API is easier to test, lending well to automated testing. You can connect to an API from different clients and not just browser.</description>
    </item>
    
  </channel>
</rss>