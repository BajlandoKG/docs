<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Addons on Vanilla Forums Documentation</title>
    <link>http://127.0.0.1:8080/categories/addons/</link>
    <description>Recent content in Addons on Vanilla Forums Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <atom:link href="http://127.0.0.1:8080/categories/addons/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Plugin Quickstart</title>
      <link>http://127.0.0.1:8080/developer/plugins/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://127.0.0.1:8080/developer/plugins/quickstart/</guid>
      <description>

&lt;h2 id=&#34;quickstart-links&#34;&gt;Quickstart Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Read about our hooks system: &lt;a href=&#34;http://127.0.0.1:8080/developers/plugins&#34;&gt;Extending Vanilla with plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download the official &lt;a href=&#34;http://vanillaforums.org/addon/example-plugin&#34;&gt;Example plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download other plugins from the &lt;a href=&#34;http://vanillaforums.org/addons&#34;&gt;Addon Directory&lt;/a&gt; and borrow their code.&lt;/li&gt;
&lt;li&gt;Get help in the &lt;a href=&#34;http://vanillaforums.org/categories/developers&#34;&gt;developer community&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;quickstart-guide&#34;&gt;Quickstart Guide&lt;/h2&gt;

&lt;p&gt;Vanilla is built on an object-oriented, MVC framework. If you&amp;rsquo;re coming at this from a mostly function-based world like WordPress or Drupal, this might read like moonspeak. That&amp;rsquo;s OK! Soak it up and ask questions on the forum after you follow this guide and play with the examples.&lt;/p&gt;

&lt;p&gt;Ready to code? Grab the &lt;a href=&#34;http://vanillaforums.org/addon/example-plugin&#34;&gt;Example plugin&lt;/a&gt; and use it below for an even quicker start. Hang onto your butts, here we go:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Name your plugin.&lt;/li&gt;
&lt;li&gt;Define your plugin.&lt;/li&gt;
&lt;li&gt;Find your hooks.&lt;/li&gt;
&lt;li&gt;Write your code.&lt;/li&gt;
&lt;li&gt;Add helper files.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;1-name-your-plugin&#34;&gt;1. Name your plugin&lt;/h3&gt;

&lt;p&gt;Conventionally, Vanilla uses, well, pretty vanilla plugin names. We often favor descriptive names over clever ones or mini-brands.&lt;/p&gt;

&lt;p&gt;Your plugin needs a user-facing name, and a &amp;lsquo;slug&amp;rsquo; name without spaces or special characters. If your plugin is named &amp;ldquo;Lincoln&amp;rsquo;s Fancy Plugin&amp;rdquo; a good slug name would be &lt;code&gt;LincolnsFancyPlugin&lt;/code&gt; or even just &lt;code&gt;FancyPlugin&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;2-define-your-plugin&#34;&gt;2. Define your plugin&lt;/h3&gt;

&lt;p&gt;First, create a folder in the &lt;code&gt;plugin&lt;/code&gt; directory, using the slug name you selected (e.g. &lt;code&gt;FancyPlugin&lt;/code&gt;). Inside the folder, create a file that includes the slug name (e.g. &lt;code&gt;class.fancyplugin.php&lt;/code&gt;). Next, open the file and add the plugin definition at the top, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
// Define the plugin:
$PluginInfo[&#39;FancyPlugin&#39;] = array(
   &#39;Name&#39; =&amp;gt; &#39;Lincoln&amp;amp;rsquo;s Fancy Plugin&#39;,
   &#39;Description&#39; =&amp;gt; &#39;This is a sample plugin.&#39;,
   &#39;Version&#39; =&amp;gt; &#39;1.0&#39;,
   &#39;Author&#39; =&amp;gt; &amp;quot;Your Name&amp;quot;,
   &#39;AuthorEmail&#39; =&amp;gt; &#39;you@yourdomain.com&#39;,
   &#39;AuthorUrl&#39; =&amp;gt; &#39;http://yourdomain.com&#39;,
   &#39;MobileFriendly&#39; =&amp;gt; TRUE,
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The array key (&lt;code&gt;FancyPlugin&lt;/code&gt; above) &lt;strong&gt;&lt;em&gt;must exactly match&lt;/em&gt;&lt;/strong&gt; the folder name, including capitalization.&lt;/p&gt;

&lt;h4 id=&#34;define-basic-info&#34;&gt;Define basic info&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;Name&lt;/code&gt; parameter is optional; it will default to the slug if omitted. To include special characters here or in the description, use their HTML code.&lt;/p&gt;

&lt;p&gt;Provide a great &lt;code&gt;Description&lt;/code&gt; that briefly explains what your plugin does from the users&amp;rsquo; perspective. For &lt;code&gt;Version&lt;/code&gt;, familiarize yourself with &lt;a href=&#34;http://semver.org/&#34;&gt;semantic versioning&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Author&lt;/code&gt; parameters are at your discretion. We recommend using a support address for both the email and URL.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;MobileFriendly&lt;/code&gt; parameter allows the plugin to be automatically disabled when accessing the site via a mobile device. We recommend defining it as &lt;code&gt;TRUE&lt;/code&gt;. If omitted, it defaults to &lt;code&gt;FALSE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All further optional parameters described below default to &lt;code&gt;FALSE&lt;/code&gt; if not defined.&lt;/p&gt;

&lt;h4 id=&#34;define-a-settings-page&#34;&gt;Define a settings page&lt;/h4&gt;

&lt;p&gt;To create a &amp;ldquo;Settings&amp;rdquo; button that will appear on the plugin after it is enabled, add these to your definition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   &#39;SettingsUrl&#39; =&amp;gt; &#39;/settings/somepagehere&#39;,
   &#39;SettingsPermission&#39; =&amp;gt; &#39;Garden.Settings.Manage&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;define-requirements&#34;&gt;Define requirements&lt;/h4&gt;

&lt;p&gt;You can require a certain version of Vanilla or that other plugins be enabled before yours can be enabled. Require a certain version of Vanilla by adding this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   &#39;RequiredApplications&#39; =&amp;gt; array(&#39;Vanilla&#39; =&amp;gt; &#39;2.0.18&#39;),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Require some other plugins to be enabled first in much the same way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   &#39;RequiredPlugins&#39; =&amp;gt; array(&#39;Akismet&#39; =&amp;gt; &#39;1.0.1&#39;, &#39;StopForumSpam&#39; =&amp;gt; &#39;1.0&#39;),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this only requires them at the time of enabling. A user could later disable the plugin(s). Therefore, it is very important to &lt;strong&gt;use defensive programming techniques to guard against missing prerequisites&lt;/strong&gt;, rather than simply assuming they will always be there just because you put it in the requirements.&lt;/p&gt;

&lt;h4 id=&#34;define-new-permissions&#34;&gt;Define new permissions&lt;/h4&gt;

&lt;p&gt;Adding new permissions via plugin is easy. Any defined here will be added as soon as the plugin is enabled. It&amp;rsquo;s important to know more about &lt;a href=&#34;http://docs.vanillaforums.com/developers/framework/permissions/&#34;&gt;using permissions in Vanilla&lt;/a&gt; before doing this.&lt;/p&gt;

&lt;p&gt;You can provide an array of permission names using dot syntax. You can optionally use key/value pairs to set a default (&lt;code&gt;1&lt;/code&gt; will give all roles the permission; &lt;code&gt;0&lt;/code&gt; is the default and leaves it off for all roles to start).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;RegisterPermissions&#39; =&amp;gt; array(&#39;FancyPlugin.DoStuff.Add&#39; =&amp;gt; 1),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or set the default to whether or not the role currently has an existing permission:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;RegisterPermissions&#39; =&amp;gt; array(&#39;FancyPlugin.DoStuff.Add&#39; =&amp;gt; &#39;Garden.Settings.Manage`),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows you to set good defaults while allowing them to be changed independently in the future.&lt;/p&gt;

&lt;h4 id=&#34;whew&#34;&gt;Whew!&lt;/h4&gt;

&lt;p&gt;That whole definitions section probably didn&amp;rsquo;t &lt;em&gt;seem&lt;/em&gt; very quick, but you just did a huge amount of work in just a few lines of code.&lt;/p&gt;

&lt;h3 id=&#34;3-find-your-hooks&#34;&gt;3. Find your hooks&lt;/h3&gt;

&lt;p&gt;Try the &lt;a href=&#34;http://vanillaforums.org/addon/eventi-plugin&#34;&gt;Eventi plugin&lt;/a&gt; to visualize where events are fired in Vanilla. Use the hooks in the &lt;a href=&#34;http://vanillaforums.org/addon/example-plugin&#34;&gt;Example plugin&lt;/a&gt; to see what they do.&lt;/p&gt;

&lt;p&gt;Read the &lt;a href=&#34;http://127.0.0.1:8080/developers/plugins&#34;&gt;plugin hooks tutorial&lt;/a&gt; for more on how to override &amp;amp; extend Vanilla.&lt;/p&gt;

&lt;p&gt;Use an IDE and use the project search functionality to locate instances of &lt;code&gt;FireEvent&lt;/code&gt; in the &lt;a href=&#34;http://github.com/vanilla/vanilla&#34;&gt;core repo&lt;/a&gt;. Many doc blocks show what events are fired within their methods. Or, search for &lt;code&gt;_Handler&lt;/code&gt; in the &lt;a href=&#34;http://github.com/vanilla/addons&#34;&gt;addons repo&lt;/a&gt; to see examples and common uses.&lt;/p&gt;

&lt;p&gt;Lastly, &lt;a href=&#34;http://vanillaforums.org/addon&#34;&gt;find a plugin&lt;/a&gt; that does something similar to what you&amp;rsquo;re trying to do, and check out its code. Maybe between 3 or 4 plugins you can find a good portion of what you&amp;rsquo;re trying to accomplish.&lt;/p&gt;

&lt;h3 id=&#34;4-write-your-code&#34;&gt;4. Write your code&lt;/h3&gt;

&lt;p&gt;After your &lt;code&gt;$PluginInfo&lt;/code&gt; array, you&amp;rsquo;ll need a class. Always extend &lt;code&gt;Gdn_Plugin&lt;/code&gt;, and name the class using the slug name of your plugin followed by the word &amp;lsquo;Plugin&amp;rsquo; to avoid namespace conflicts.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class FancyPlugin extends Gdn_Plugin() {

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside the class, give methods special names to invoke hooks. Most hooks in a plugin are written like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function SomeController_SomeEvent_Handler($Sender, $Args) {
   // Do something.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use the &lt;code&gt;$Sender&lt;/code&gt; variable to call methods from the controller or model that triggered your code. Use the &lt;code&gt;$Args&lt;/code&gt; variable to change parameters or detect certain situations. This is where you&amp;rsquo;ll want to start digging into the finer points of &lt;a href=&#34;http://127.0.0.1:8080/developers/plugins&#34;&gt;extending Vanilla with plugins&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also use normal methods to reuse code. For instance, maybe you need 2 different hooks to do the same thing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function DiscussionsController_SomeEvent_Handler($Sender, $Args) {
   $this-&amp;gt;CommonMethod($Sender, $Args);
}

public function CategoriesController_SomeOtherEvent_Handler($Sender, $Args) {
   $this-&amp;gt;CommonMethod($Sender, $Args);
}

public function CommonMethod($Sender, $Args) {
   // Do something for both the events above so we keep things DRY.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Need a simple settings page? See the &lt;code&gt;ConfigurationModule&lt;/code&gt; and how it is used in other plugins for a quick &amp;amp; easy way of making one.&lt;/p&gt;

&lt;p&gt;After your class, you can define any functions from core that you wish to override. Do this very conservatively and carefully.&lt;/p&gt;

&lt;h3 id=&#34;5-add-helper-files&#34;&gt;5. Add helper files&lt;/h3&gt;

&lt;p&gt;By convention, place CSS files in a folder named &lt;code&gt;design&lt;/code&gt;, Javascript files in a folder named &lt;code&gt;js&lt;/code&gt;, views (templates) in a folder named &lt;code&gt;views&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To include a CSS file in all non-Dashboard pages:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function AssetModel_StyleCss_Handler($Sender) {
   $Sender-&amp;gt;AddCssFile(&#39;fancy.css&#39;, &#39;plugins/FancyPlugin&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the second parameter is the folder.&lt;/p&gt;

&lt;p&gt;To include a CSS file in a specific page (e.g. the Discussions list):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function DiscussionsController_Render_Before($Sender) {
   $Sender-&amp;gt;AddCssFile(&#39;fancy.css&#39;, &#39;plugins/FancyPlugin&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To include a JS file: &lt;code&gt;$Sender-&amp;gt;AddJsFile(&#39;fancy.js&#39;, &#39;plugins/FancyPlugin&#39;);&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To output the view &lt;code&gt;fancy.php&lt;/code&gt; in your &lt;code&gt;views&lt;/code&gt; folder: &lt;code&gt;$Sender-&amp;gt;Render(&#39;fancy&#39;, &#39;&#39;, &#39;plugins/FancyPlugin&#39;);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Again, for a simple settings page, don&amp;rsquo;t create your own views. Use the &lt;code&gt;ConfigurationModule&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;quickstart-epilogue&#34;&gt;Quickstart Epilogue&lt;/h2&gt;

&lt;p&gt;That should put you well on your way to your first Vanilla plugin! Dream big, but pick something small for your first attempt. You&amp;rsquo;ll learn a ton, and be better positioned to go big after that.&lt;/p&gt;

&lt;p&gt;Final tips:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use the &lt;a href=&#34;http://127.0.0.1:8080/developers/troubleshooting&#34;&gt;troubleshooting guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;decho()&lt;/code&gt; to output variables &amp;amp; &lt;code&gt;Trace()&lt;/code&gt; to leave breadcrumbs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Wrap all URLs&lt;/strong&gt; with &lt;code&gt;Url()&lt;/code&gt; to account for subfolder&amp;rsquo;d forums.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Never hard-code paths&lt;/strong&gt;. Use constants like &lt;code&gt;PATH_UPLOADS&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use models&lt;/strong&gt; to access the database rather than writing your own queries. E.g.: Need discussions? Look at &lt;code&gt;DiscussionModel&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Adding your own data to the database? Read about the &lt;a href=&#34;http://127.0.0.1:8080/developers/framework/database&#34;&gt;database query builder&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, as always, ask the talented &amp;amp; helpful folks on our &lt;a href=&#34;http://vanillaforums.org/discussions&#34;&gt;community forum&lt;/a&gt; when you get stuck.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>